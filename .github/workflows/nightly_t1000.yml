name: nightly_t1000

on:
  schedule:
    - cron: "27 2 * * *"
  workflow_dispatch:
    inputs:
      threshold:
        description: pass rate threshold
        required: false
        default: "0.70"
      suite:
        description: suite
        required: false
        default: "t1000"

concurrency:
  group: nightly_t1000
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python3 -m pip install --upgrade pip wheel
          python3 -m pip install matplotlib

      - name: Start ${{ inputs.suite || 't1000' }}
        run: |
          bash scripts/start_t1000.sh ${{ inputs.suite || 't1000' }}

      - name: Verify ${{ inputs.suite || 't1000' }}
        run: |
          bash scripts/verify_t1000.sh ${{ inputs.suite || 't1000' }}

      - name: Roll up metrics and plot trend
        run: |
          python3 scripts/metrics_rollup.py
          ls -lh artifacts/t1000/metrics_history.csv artifacts/t1000/passrate_local.png || true

      - id: parse
        name: Parse verify_summary.txt
        run: |
          PYTHONWARNINGS=ignore python3 - <<'PY'
          import os, re, pathlib
          p = pathlib.Path("artifacts/t1000/latest/verify_summary.txt")
          rows=0; pr=0.0; dp=0.0
          if p.exists():
              t = p.read_text(encoding="utf-8", errors="ignore")
              m_rows = re.search(r"rows\s*[:=]\s*(\d+)", t, re.I)
              m_pr   = re.search(r"pass[_\s-]?rate\s*[:=]\s*([0-9.]+)", t, re.I)
              m_dp   = re.search(r"delta[_\s-]?pp\s*[:=]\s*(-?[0-9.]+)", t, re.I)
              if m_rows: rows = int(m_rows.group(1))
              if m_pr:   pr   = float(m_pr.group(1))
              if m_dp:   dp   = float(m_dp.group(1))
          print(f"rows={rows}, pass_rate={pr}, delta_pp={dp}")
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"rows={rows}\n")
              f.write(f"pass_rate={pr}\n")
              f.write(f"delta_pp={dp}\n")
          PY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: t1000_artifacts
          path: |
            artifacts/t1000/latest
            artifacts/t1000/metrics_history.csv
            artifacts/t1000/passrate_local.png

      - name: Job summary
        run: |
          {
            echo "### T1000 nightly summary"
            echo ""
            echo "- rows: **${{ steps.parse.outputs.rows }}**"
            echo "- pass_rate: **${{ steps.parse.outputs.pass_rate }}**"
            echo "- delta_pp: **${{ steps.parse.outputs.delta_pp }}**"
            echo ""
            echo "Artifacts: \`artifacts/t1000/latest\`, history: \`artifacts/t1000/metrics_history.csv\`"
          } >> $GITHUB_STEP_SUMMARY

      - name: Fail guard
        continue-on-error: true
        env:
          THRESHOLD: ${{ inputs.threshold || '0.70' }}
          PR: ${{ steps.parse.outputs.pass_rate || 0 }}
        run: |
          python3 - <<'PY'
          import os,sys
          pr=float(os.environ.get("PR","0"))
          th=float(os.environ.get("THRESHOLD","0.7"))
          if pr + 1e-12 < th:
              print(f"Guard: pass_rate={pr:.6f} < threshold={th:.6f} -> FAIL")
              sys.exit(1)
          else:
              print(f"Guard: pass_rate={pr:.6f} >= threshold={th:.6f} -> OK")
          PY
